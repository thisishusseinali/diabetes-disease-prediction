# -*- coding: utf-8 -*-
"""diabetes disease prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1913SMgMdoE0Vgh1Pj6fFVFNRC7JrccbO

# Diabetes Prediction
"""

# import libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import accuracy_score

# loading dataset to pandas dataframe 
diabetes_dataset = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Diabetes Prediction/diabetes.csv')

diabetes_dataset.head()

diabetes_dataset.shape # number of rows and columns in this dataset

diabetes_dataset.describe() # stat* description of dataset

diabetes_dataset['Outcome'].value_counts()

diabetes_dataset.groupby('Outcome').mean()

X = diabetes_dataset.drop(columns='Outcome',axis=1)
Y = diabetes_dataset['Outcome']

print(X.shape)
print(Y.shape)

# Data Standeriztion
scaler = StandardScaler()

scaler.fit(X)

standerdized_data = scaler.transform(X)

print(standerdized_data)

X = standerdized_data
Y = diabetes_dataset['Outcome']

print(X)
print(Y)

x_train,x_test,y_train,y_test = train_test_split(X,Y,test_size = 0.2,stratify=Y,random_state=2)

print('X_train(Shape):{} - X_test(Shape):{} '.format(x_train.shape,x_test.shape))

print('Y_train(Shape):{} - Y_test(Shape):{} '.format(y_train.shape,y_test.shape))

lg_model = LogisticRegression()
dt_model = DecisionTreeClassifier()
rf_model = RandomForestClassifier()
sv_model = SVC()
nb_model = GaussianNB()
kn_model = KNeighborsClassifier()

# training the model 
print(lg_model.fit(x_train,y_train))
print(dt_model.fit(x_train,y_train))
print(rf_model.fit(x_train,y_train))
print(sv_model.fit(x_train,y_train))
print(nb_model.fit(x_train,y_train))
print(kn_model.fit(x_train,y_train))

print(lg_model.score(x_test,y_test))
print(dt_model.score(x_test,y_test))
print(rf_model.score(x_test,y_test))
print(sv_model.score(x_test,y_test))
print(nb_model.score(x_test,y_test))
print(kn_model.score(x_test,y_test))

from sklearn.model_selection import cross_val_score
print(cross_val_score(lg_model,X,Y,cv=3))
print(cross_val_score(dt_model,X,Y,cv=3))
print(cross_val_score(rf_model,X,Y,cv=3))
print(cross_val_score(sv_model,X,Y,cv=3))
print(cross_val_score(nb_model,X,Y,cv=3))
print(cross_val_score(kn_model,X,Y,cv=3))

model_params = {
    'svm': {
        'model': SVC(gamma='auto'),
        'params' : {
            'C': [1,10,20],
            'kernel': ['rbf','linear']
        }  
    },
    'random_forest': {
        'model': RandomForestClassifier(),
        'params' : {
            'n_estimators': [1,5,10]
        }
    },
    'logistic_regression' : {
        'model': LogisticRegression(solver='liblinear',multi_class='auto'),
        'params': {
            'C': [1,5,10]
        }
    }
}
scores = []

for model_name, mp in model_params.items():
    clf =  GridSearchCV(mp['model'], mp['params'], cv=5, return_train_score=False)
    clf.fit(X,Y)
    scores.append({
        'model': model_name,
        'best_score': clf.best_score_,
        'best_params': clf.best_params_
    })
    
df = pd.DataFrame(scores,columns=['model','best_score','best_params'])
df

import joblib
joblib.dump(lg_model,'lg_model.sav')
joblib.dump(dt_model,'dt_model.sav')
joblib.dump(rf_model,'rf_model.sav')
joblib.dump(sv_model,'sv_model.sav')
joblib.dump(nb_model,'nb_model.sav')
joblib.dump(kn_model,'kn_model.sav')

# Model Evaluation
X_train_prediction = lg_model.predict(x_train)
training_data_acc = accuracy_score(X_train_prediction,y_train)
print('The Training Data Accuracy : {}'.format(training_data_acc))

X_test_prediction = lg_model.predict(x_test)
test_data_acc = accuracy_score(X_test_prediction,y_test)
print('The Test Data Accuracy : {}'.format(test_data_acc))

# Makeing Predicting System
input_data = (1,85,66,29,0,26.6,0.351,31)
# changeing input data to an nparray
input_data_as_numpy_array = np.asarray(input_data)
# reshapeing data to input in model
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
# standarize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)
prediction = lg_model.predict(std_data)
print(prediction)
if (prediction[0] == 1):
  print('diabeteic')
else:
  print('non-diabeteic')

## using svm to predict diabetes- see soon
print('End')