# -*- coding: utf-8 -*-
"""Diabetes Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1913SMgMdoE0Vgh1Pj6fFVFNRC7JrccbO

# Diabetes Prediction
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

# loading dataset to pandas dataframe 
diabetes_dataset = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Diabetes Prediction/diabetes.csv')

diabetes_dataset.head()

diabetes_dataset.shape # number of rows and columns in this dataset

diabetes_dataset.describe() # stat* description of dataset

diabetes_dataset['Outcome'].value_counts()

diabetes_dataset.groupby('Outcome').mean()

X = diabetes_dataset.drop(columns='Outcome',axis=1)
Y = diabetes_dataset['Outcome']

print(X.shape)
print(Y.shape)

# Data Standeriztion
scaler = StandardScaler()

scaler.fit(X)

standerdized_data = scaler.transform(X)

print(standerdized_data)

X = standerdized_data
Y = diabetes_dataset['Outcome']

print(X)
print(Y)

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.2,stratify=Y,random_state=2)

print('X_train(Shape):{} - X_test(Shape):{} '.format(X_train.shape,X_test.shape))

print('Y_train(Shape):{} - Y_test(Shape):{} '.format(Y_train.shape,Y_test.shape))

# training the model 
classifier = svm.SVC(kernel='linear')

classifier.fit(X_train,Y_train)

# Model Evaluation
X_train_prediction = classifier.predict(X_train)
training_data_acc = accuracy_score(X_train_prediction,Y_train)
print('The Training Data Accuracy : {}'.format(training_data_acc))

X_test_prediction = classifier.predict(X_test)
test_data_acc = accuracy_score(X_test_prediction,Y_test)
print('The Test Data Accuracy : {}'.format(test_data_acc))

# Makeing Predicting System
input_data = (1,85,66,29,0,26.6,0.351,31)
# changeing input data to an nparray
input_data_as_numpy_array = np.asarray(input_data)
# reshapeing data to input in model
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
# standarize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)
prediction = classifier.predict(std_data)
print(prediction)
if (prediction[0] == 1):
  print('diabeteic')
else:
  print('non-diabeteic')

## using svm to predict diabetes- see soon
print('End')